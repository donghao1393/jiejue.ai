<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>环境管理 on 爱解决</title><link>https://jiejue.ai/%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/</link><description>Recent content in 环境管理 on 爱解决</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 01 May 2025 19:59:05 +0400</lastBuildDate><atom:link href="https://jiejue.ai/%E7%8E%AF%E5%A2%83%E7%AE%A1%E7%90%86/index.xml" rel="self" type="application/rss+xml"/><item><title>解决多版本Python依赖冲突：pyenv与venv双剑合璧</title><link>https://jiejue.ai/2025/04/python-version-management-with-pyenv/</link><pubDate>Mon, 21 Apr 2025 00:09:43 +0400</pubDate><guid>https://jiejue.ai/2025/04/python-version-management-with-pyenv/</guid><description>&lt;p>在当今复杂多变的Python开发环境中，Python版本管理可谓是开发者的一大痛点。一边是需要特定旧版本Python的传统项目，一边是要求最新特性的现代框架，如何在一台机器上和谐共处？本文将介绍pyenv与venv的组合使用方案，以解决Python版本依赖冲突问题。&lt;/p></description></item><item><title>uv：重新定义 Python 包管理与环境隔离的未来</title><link>https://jiejue.ai/2025/03/python-uv-in-depth/</link><pubDate>Thu, 27 Mar 2025 23:49:41 +0400</pubDate><guid>https://jiejue.ai/2025/03/python-uv-in-depth/</guid><description>&lt;p>Python 生态系统中的工具链一直以其复杂性而闻名。开发者们被迫在 pip、virtualenv、conda 等工具间切换，每个都有各自的优缺点和使用方式。uv 的出现可能将彻底改变这一现状。&lt;/p></description></item><item><title>告别繁琐：uv 让 Python 环境管理更简单高效</title><link>https://jiejue.ai/2025/03/python-uv-quick-guide/</link><pubDate>Thu, 27 Mar 2025 23:49:41 +0400</pubDate><guid>https://jiejue.ai/2025/03/python-uv-quick-guide/</guid><description>&lt;p>Python 环境管理一直是困扰开发者的难题，是否厌倦了 conda 的臃肿和 virtualenv 的繁琐？uv 可能是你期待已久的救星。&lt;/p></description></item></channel></rss>