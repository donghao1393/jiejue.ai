<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DevOps on 爱解决</title><link>https://jiejue.ai/devops/</link><description>Recent content in DevOps on 爱解决</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Tue, 22 Jul 2025 20:47:09 +0400</lastBuildDate><atom:link href="https://jiejue.ai/devops/index.xml" rel="self" type="application/rss+xml"/><item><title>yq：让YAML文件处理变得简单高效的神器</title><link>https://jiejue.ai/2025/07/yq-yaml-processor-guide/</link><pubDate>Tue, 22 Jul 2025 20:32:34 +0400</pubDate><guid>https://jiejue.ai/2025/07/yq-yaml-processor-guide/</guid><description>&lt;p>作为一名运维工程师，你是否经常需要在复杂的Kubernetes配置文件中查找特定的服务配置？或者需要从包含几十个资源定义的YAML文件中提取某个特定的Deployment？如果你还在用文本编辑器一行行查找，或者写复杂的脚本来处理YAML文件，那么yq这个工具将会彻底改变你的工作方式。&lt;/p></description></item><item><title>yq：YAML 的 jq 工具，让配置文件查询变得优雅</title><link>https://jiejue.ai/2025/07/yq-yaml-query-tool-for-developers/</link><pubDate>Mon, 21 Jul 2025 21:52:19 +0400</pubDate><guid>https://jiejue.ai/2025/07/yq-yaml-query-tool-for-developers/</guid><description>&lt;p>如果你是一名 DevOps 工程师或者 Kubernetes 管理员，你一定深有体感：每天都在与各种 YAML 配置文件打交道。从 Pod 配置到 Service 定义，从 ConfigMap 到 Ingress 规则，YAML 无处不在。但是当这些文件变得复杂时，如何快速提取和操作其中的数据就成了一个挑战。&lt;/p>
&lt;p>幸运的是，有了 yq 这个工具，处理 YAML 就像使用 jq 处理 JSON 一样简单优雅。&lt;/p></description></item><item><title>Kubernetes Ingress Annotations 实战指南：从 413 错误到流式传输的完整解析</title><link>https://jiejue.ai/2025/07/k8s-ingress-annotations-guide/</link><pubDate>Tue, 15 Jul 2025 21:04:04 +0400</pubDate><guid>https://jiejue.ai/2025/07/k8s-ingress-annotations-guide/</guid><description>&lt;p>作为 Kubernetes 工作者，你可能经常与 Ingress 资源打交道，但对于那些看似神秘的 annotations（注解）配置，可能只是复制粘贴，却不太清楚它们的真正含义。当遇到 413 Request Entity Too Large 错误，或者需要支持大文件上传、流式传输时，你知道该调整哪些参数吗？&lt;/p></description></item><item><title>Azure Function App多应用共享Storage Account实践指南</title><link>https://jiejue.ai/2025/07/azure-function-storage-sharing-guide/</link><pubDate>Fri, 04 Jul 2025 20:47:48 +0400</pubDate><guid>https://jiejue.ai/2025/07/azure-function-storage-sharing-guide/</guid><description>&lt;p>作为Azure开发者或DevOps工程师，你可能遇到过这样的场景：公司有多个Function App，但出于成本控制或管理便利性考虑，希望让它们共享同一个Storage Account。这样做可行吗？会有什么风险？如何正确配置？&lt;/p></description></item><item><title>Terraform Azure状态锁定问题深度解析：权限、解锁和最佳实践</title><link>https://jiejue.ai/2025/06/terraform-azure-state-lock-troubleshooting/</link><pubDate>Wed, 25 Jun 2025 21:13:41 +0400</pubDate><guid>https://jiejue.ai/2025/06/terraform-azure-state-lock-troubleshooting/</guid><description>&lt;p>当你在生产环境中使用Terraform管理Azure资源时，可能会遇到这样一个令人困惑的错误：&lt;code>StatusCode=403 -- Original Error: autorest/azure: Service returned an error. Status=403 Code=&amp;quot;AuthorizationFailure&amp;quot;&lt;/code>。这个看似简单的权限错误背后，实际上涉及到Terraform状态管理、Azure存储权限、以及基础设施即代码的核心设计理念。&lt;/p></description></item><item><title>使用 Semantic Release 实现自动化版本发布：踩坑与解决方案</title><link>https://jiejue.ai/2025/03/automatic-versioning-with-semantic-release/</link><pubDate>Thu, 13 Mar 2025 21:15:50 +0400</pubDate><guid>https://jiejue.ai/2025/03/automatic-versioning-with-semantic-release/</guid><description>&lt;p>在软件开发过程中，版本管理看似简单却常常令人头疼。手动管理版本不仅繁琐，还容易出错。通过语义化版本发布工具（Semantic Release），我们可以将这一过程自动化，但这个过程中也隐藏着一些易被忽视的陷阱。本文将分享我们团队在使用 Semantic Release 时遇到的问题和解决方案，帮助你避开这些坑。&lt;/p></description></item><item><title>通过Kubernetes和Fish Shell优雅地访问内网服务</title><link>https://jiejue.ai/2025/03/elegant-internal-service-access-with-kubernetes-fish/</link><pubDate>Tue, 11 Mar 2025 22:29:45 +0400</pubDate><guid>https://jiejue.ai/2025/03/elegant-internal-service-access-with-kubernetes-fish/</guid><description>&lt;p>你是否曾经需要临时访问公司内网的服务，却苦于没有合适的工具？特别是当VPN因为安全限制无法使用，或者你只需要短暂地连接到特定服务时？本文将介绍一种基于Kubernetes和Fish Shell的解决方案，让你能够安全、便捷地通过K8s集群代理访问内网服务。&lt;/p></description></item><item><title>项目发布自动化：从混乱到规范的实践之路</title><link>https://jiejue.ai/2025/02/release-automation-best-practices/</link><pubDate>Wed, 19 Feb 2025 21:49:58 +0400</pubDate><guid>https://jiejue.ai/2025/02/release-automation-best-practices/</guid><description>&lt;p>最近在优化项目的发布流程时，发现虽然我们都知道&amp;quot;规范很重要&amp;quot;，但在实际操作中往往会陷入&amp;quot;为了快速发布而忽视规范&amp;quot;的怪圈。本文将分享如何通过自动化工具和规范化流程，让项目发布变得更加可控和高效。&lt;/p></description></item><item><title>Kustomize 补丁操作详解：以 K8s 配置管理为例</title><link>https://jiejue.ai/2025/02/kustomize-patches-guide/</link><pubDate>Sat, 08 Feb 2025 19:01:43 +0400</pubDate><guid>https://jiejue.ai/2025/02/kustomize-patches-guide/</guid><description>&lt;p>在管理 Kubernetes 配置时，我们经常需要针对不同环境调整配置内容。比如测试环境和生产环境可能需要不同的参数配置，或者某些特性只在特定环境启用。这时候，Kustomize 的补丁（patches）功能就派上用场了。&lt;/p></description></item><item><title>如何优化臃肿的Docker镜像</title><link>https://jiejue.ai/2025/02/docker-image-optimization/</link><pubDate>Sat, 08 Feb 2025 18:49:54 +0400</pubDate><guid>https://jiejue.ai/2025/02/docker-image-optimization/</guid><description>&lt;p>最近在开发一个Python Web服务时，发现构建出的Docker镜像体积竟然高达6、7GB。这显然不是一个理想的状态：巨大的镜像不仅会占用大量存储空间，还会降低部署效率，增加出错风险。本文将分享我们是如何优化这个问题的。&lt;/p></description></item></channel></rss>