<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>版本控制 on 爱解决</title><link>https://jiejue.ai/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link><description>Recent content in 版本控制 on 爱解决</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Thu, 01 May 2025 19:59:05 +0400</lastBuildDate><atom:link href="https://jiejue.ai/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>深入理解Git引用与范围表示法：从点到线的思维转变</title><link>https://jiejue.ai/2025/04/understanding-git-references-and-ranges/</link><pubDate>Mon, 21 Apr 2025 09:41:48 +0400</pubDate><guid>https://jiejue.ai/2025/04/understanding-git-references-and-ranges/</guid><description>&lt;p>在日常开发中，我们经常需要查看历史提交、比较不同版本之间的差异，或者创建补丁文件。但你是否曾被Git的各种引用表示法（如HEAD~3, HEAD^）和范围符号（..和&amp;hellip;）搞得一头雾水？本文将为你详细解析这些概念，帮助你从&amp;quot;点&amp;quot;到&amp;quot;线&amp;quot;的思维方式转变，更好地理解和使用Git。&lt;/p></description></item><item><title>Git进阶：优雅地忽略已追踪文件的变更</title><link>https://jiejue.ai/2025/03/git-ignore-tracked-file-changes/</link><pubDate>Fri, 21 Mar 2025 18:27:40 +0400</pubDate><guid>https://jiejue.ai/2025/03/git-ignore-tracked-file-changes/</guid><description>&lt;p>当你使用Git时，是否曾被一些不想提交但总是显示为已修改的文件所困扰？例如MacOS的.DS_Store文件、IDE的配置文件或是子模块中的临时文件？本文将介绍Git中不为人熟知但极其实用的忽略文件变更的方法。&lt;/p></description></item><item><title>使用 Semantic Release 实现自动化版本发布：踩坑与解决方案</title><link>https://jiejue.ai/2025/03/automatic-versioning-with-semantic-release/</link><pubDate>Thu, 13 Mar 2025 21:15:50 +0400</pubDate><guid>https://jiejue.ai/2025/03/automatic-versioning-with-semantic-release/</guid><description>&lt;p>在软件开发过程中，版本管理看似简单却常常令人头疼。手动管理版本不仅繁琐，还容易出错。通过语义化版本发布工具（Semantic Release），我们可以将这一过程自动化，但这个过程中也隐藏着一些易被忽视的陷阱。本文将分享我们团队在使用 Semantic Release 时遇到的问题和解决方案，帮助你避开这些坑。&lt;/p></description></item><item><title>Git补救指南：如何优雅地撤销错误提交</title><link>https://jiejue.ai/2025/03/git-undo-commands-guide/</link><pubDate>Sat, 08 Mar 2025 00:23:27 +0400</pubDate><guid>https://jiejue.ai/2025/03/git-undo-commands-guide/</guid><description>&lt;h2 id="前言人非圣贤孰能无错">前言：人非圣贤，孰能无错？&lt;/h2>
&lt;p>在代码开发的日常工作中，错误提交几乎是不可避免的 —— 无论你是将一个调试代码意外地提交了上去，还是把更改提交到了错误的分支，亦或是在提交信息中打错了字。这些都是开发过程中再正常不过的&amp;quot;小意外&amp;quot;。&lt;/p></description></item><item><title>Git时光机：如何优雅地移除历史提交中的敏感目录</title><link>https://jiejue.ai/2025/02/git-remove-sensitive-directory-from-history/</link><pubDate>Sun, 23 Feb 2025 11:57:36 +0400</pubDate><guid>https://jiejue.ai/2025/02/git-remove-sensitive-directory-from-history/</guid><description>&lt;p>在使用Git进行版本控制时，我们偶尔会遇到这样的情况：某个目录或文件不小心被提交到了版本库中，而这个目录可能包含了一些不应该被版本控制的内容。这时，我们需要在保留文件的同时，将它从Git的历史记录中移除。&lt;/p></description></item></channel></rss>