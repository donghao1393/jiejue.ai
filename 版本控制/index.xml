<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>版本控制 on 爱解决</title><link>https://jiejue.ai/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/</link><description>Recent content in 版本控制 on 爱解决</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Fri, 08 Aug 2025 09:21:59 +0400</lastBuildDate><atom:link href="https://jiejue.ai/%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6/index.xml" rel="self" type="application/rss+xml"/><item><title>Git分支合并冲突解决：分布式版本控制的实战策略</title><link>https://jiejue.ai/2025/08/git-merge-conflict-resolution-deep/</link><pubDate>Fri, 08 Aug 2025 09:17:46 +0400</pubDate><guid>https://jiejue.ai/2025/08/git-merge-conflict-resolution-deep/</guid><description>&lt;p>在现代软件开发中，分支合并冲突是团队协作中不可避免的技术挑战。本文将深入分析一个真实的冲突解决案例，探讨其背后的技术原理和最佳实践策略。&lt;/p>
&lt;p>通过这个案例，我们将看到如何将复杂的版本控制问题转化为可管理的、系统化的解决方案。&lt;/p></description></item><item><title>Git 文件隐藏完全指南：让不想要的文件「消失」的4种方法</title><link>https://jiejue.ai/2025/08/git-file-hiding-complete-guide/</link><pubDate>Fri, 08 Aug 2025 09:05:24 +0400</pubDate><guid>https://jiejue.ai/2025/08/git-file-hiding-complete-guide/</guid><description>&lt;p>你有没有遇到过这样的困扰：Git 总是提醒你有未跟踪的文件，但这些文件你既不想提交，又不想删除？比如系统自动生成的 &lt;code>.DS_Store&lt;/code> 文件，或者你的个人配置文件？&lt;/p>
&lt;p>今天我们来学习 4 种让这些&amp;quot;麻烦&amp;quot;文件在 Git 中&amp;quot;消失&amp;quot;的方法，每种方法都有自己的适用场景，掌握了它们，你就能让 Git 乖乖听话！&lt;/p></description></item><item><title>Git Stash选择性应用：如何只恢复需要的文件修改</title><link>https://jiejue.ai/2025/07/git-stash-selective-apply-files/</link><pubDate>Tue, 29 Jul 2025 19:09:11 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-stash-selective-apply-files/</guid><description>&lt;p>在日常开发中，你是否遇到过这样的情况：修改了多个文件，但只想应用其中某些文件的修改，而把其他文件的修改先放一边？传统的git stash要么全部保存，要么全部恢复，但实际上Git提供了更灵活的选择性操作方法。&lt;/p></description></item><item><title>Git Cherry-pick追踪：解决代码变更血缘关系的迷失问题</title><link>https://jiejue.ai/2025/07/git-cherry-pick-tracking-guide/</link><pubDate>Thu, 24 Jul 2025 20:23:35 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-cherry-pick-tracking-guide/</guid><description>&lt;p>作为一名开发者，你是否遇到过这样的困扰：在项目的不同分支间穿梭时，看到一些似曾相识的commit，却无法确定它们之间的关系？这个功能是从哪个分支来的？是直接开发的还是从别处cherry-pick过来的？如果是后者，原始的commit在哪里？&lt;/p></description></item><item><title>Git查看其他分支日志：无需切换分支的高效方法</title><link>https://jiejue.ai/2025/07/git-log-other-branch-without-switching/</link><pubDate>Mon, 21 Jul 2025 21:31:34 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-log-other-branch-without-switching/</guid><description>&lt;p>在日常开发中，我们经常需要查看其他分支的提交历史，但又不想频繁切换分支打断当前的工作流程。Git提供了一个非常简单但强大的解决方案，让你能够直接查看任何分支或提交的日志记录。&lt;/p></description></item><item><title>误删Git分支？别慌！一条命令帮你找回来</title><link>https://jiejue.ai/2025/07/git-branch-recovery-guide/</link><pubDate>Mon, 21 Jul 2025 20:27:29 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-branch-recovery-guide/</guid><description>&lt;p>刚刚手滑删掉了一个重要的Git分支？看到那行红色的&amp;quot;Deleted branch&amp;quot;信息时是不是心都凉了半截？别担心，你的代码还在！只要掌握正确的方法，99%的情况下都能完美恢复。&lt;/p></description></item><item><title>Git如何智能处理文件重命名和合并冲突：超越commit的内容感知机制</title><link>https://jiejue.ai/2025/07/git-smart-merge-logic/</link><pubDate>Sat, 19 Jul 2025 00:04:51 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-smart-merge-logic/</guid><description>&lt;p>当你遇到&lt;code>git pull&lt;/code>因为本地修改而失败时，可能会疑惑：为什么有时候简单的stash就能解决，有时候却需要复杂的冲突解决？更神奇的是，当你手动移动文件后，Git竟然能够智能地处理远程的重构操作。这背后的机制远比你想象的更精妙。&lt;/p></description></item><item><title>Git Submodule 完全指南：一次搞懂子模块的原理与实战</title><link>https://jiejue.ai/2025/07/git-submodule-complete-guide/</link><pubDate>Fri, 04 Jul 2025 21:44:40 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-submodule-complete-guide/</guid><description>&lt;p>当你在开发一个博客网站，想要引入一个漂亮的主题和评论系统时，突然发现这些都是独立的 Git 仓库。你可能会想：是直接下载代码复制过来，还是有更优雅的方式？Git Submodule（子模块）就是专门解决这个问题的工具。&lt;/p></description></item><item><title>Git 跨分支文件拷贝：告别克隆整个项目的笨办法</title><link>https://jiejue.ai/2025/06/git-cross-branch-file-copy/</link><pubDate>Thu, 19 Jun 2025 01:01:21 +0400</pubDate><guid>https://jiejue.ai/2025/06/git-cross-branch-file-copy/</guid><description>&lt;p>想象一下，你正在进行项目开发，突然需要从另一个分支获取某个配置文件。你会怎么做？很多开发者的第一反应是：克隆一个新的项目副本，切换到目标分支，然后手动复制文件。如果你也是这样做的，那么这篇文章将彻底改变你的工作方式。&lt;/p></description></item><item><title>Git的设计哲学：为什么Merge比Cherry-pick更智能？</title><link>https://jiejue.ai/2025/06/git-merge-vs-cherry-pick-design-philosophy/</link><pubDate>Thu, 19 Jun 2025 00:32:09 +0400</pubDate><guid>https://jiejue.ai/2025/06/git-merge-vs-cherry-pick-design-philosophy/</guid><description>&lt;p>作为程序员，我们每天都在使用Git，但你真的理解它的设计哲学吗？最近在一个开发场景中，我遇到了一个有趣的问题：当我的开发分支缺少一个即将被推送到主分支的文件时，应该用cherry-pick还是merge来解决？这个看似简单的选择，背后藏着Git设计的核心智慧。&lt;/p></description></item><item><title>理解 Git Pull 和 Git Fetch 的区别</title><link>https://jiejue.ai/2025/05/understanding-git-pull-vs-fetch/</link><pubDate>Sun, 11 May 2025 00:37:23 +0400</pubDate><guid>https://jiejue.ai/2025/05/understanding-git-pull-vs-fetch/</guid><description>&lt;p>如果你使用 Git 进行团队协作，一定会遇到这样的问题：&lt;code>git pull&lt;/code> 和 &lt;code>git fetch&lt;/code> 到底有什么区别？为什么有时候执行 &lt;code>git pull&lt;/code> 后能看到新分支信息，但分支内容却没有更新？&lt;/p></description></item><item><title>Git 进阶技巧：那些让工作效率翻倍的隐藏功能</title><link>https://jiejue.ai/2025/05/git-advanced-tips-hidden-features/</link><pubDate>Sun, 11 May 2025 00:25:19 +0400</pubDate><guid>https://jiejue.ai/2025/05/git-advanced-tips-hidden-features/</guid><description>&lt;p>你是否遇到过这样的情况：正在开发新功能时，突然有个紧急 bug 需要修复？或者同事请你演示他的代码，而你又不想丢失当前的工作进度？其实 Git 有很多隐藏的功能，能让你的工作变得更加高效。&lt;/p></description></item><item><title>Git 进阶技巧：深入理解那些隐藏的强大功能</title><link>https://jiejue.ai/2025/05/git-advanced-tips-deep-dive/</link><pubDate>Sun, 11 May 2025 00:25:19 +0400</pubDate><guid>https://jiejue.ai/2025/05/git-advanced-tips-deep-dive/</guid><description>&lt;p>Git 作为最流行的版本控制系统，除了基本的 add、commit、push 操作外，还隐藏着许多强大的功能。这些功能不仅能提高工作效率，更能帮助我们更好地理解 Git 的工作原理。让我们深入探索这些进阶技巧。&lt;/p></description></item><item><title>深入理解Git引用与范围表示法：从点到线的思维转变</title><link>https://jiejue.ai/2025/04/understanding-git-references-and-ranges/</link><pubDate>Mon, 21 Apr 2025 09:41:48 +0400</pubDate><guid>https://jiejue.ai/2025/04/understanding-git-references-and-ranges/</guid><description>&lt;p>在日常开发中，我们经常需要查看历史提交、比较不同版本之间的差异，或者创建补丁文件。但你是否曾被Git的各种引用表示法（如HEAD~3, HEAD^）和范围符号（..和&amp;hellip;）搞得一头雾水？本文将为你详细解析这些概念，帮助你从&amp;quot;点&amp;quot;到&amp;quot;线&amp;quot;的思维方式转变，更好地理解和使用Git。&lt;/p></description></item><item><title>Git进阶：优雅地忽略已追踪文件的变更</title><link>https://jiejue.ai/2025/03/git-ignore-tracked-file-changes/</link><pubDate>Fri, 21 Mar 2025 18:27:40 +0400</pubDate><guid>https://jiejue.ai/2025/03/git-ignore-tracked-file-changes/</guid><description>&lt;p>当你使用Git时，是否曾被一些不想提交但总是显示为已修改的文件所困扰？例如MacOS的.DS_Store文件、IDE的配置文件或是子模块中的临时文件？本文将介绍Git中不为人熟知但极其实用的忽略文件变更的方法。&lt;/p></description></item><item><title>使用 Semantic Release 实现自动化版本发布：踩坑与解决方案</title><link>https://jiejue.ai/2025/03/automatic-versioning-with-semantic-release/</link><pubDate>Thu, 13 Mar 2025 21:15:50 +0400</pubDate><guid>https://jiejue.ai/2025/03/automatic-versioning-with-semantic-release/</guid><description>&lt;p>在软件开发过程中，版本管理看似简单却常常令人头疼。手动管理版本不仅繁琐，还容易出错。通过语义化版本发布工具（Semantic Release），我们可以将这一过程自动化，但这个过程中也隐藏着一些易被忽视的陷阱。本文将分享我们团队在使用 Semantic Release 时遇到的问题和解决方案，帮助你避开这些坑。&lt;/p></description></item><item><title>Git补救指南：如何优雅地撤销错误提交</title><link>https://jiejue.ai/2025/03/git-undo-commands-guide/</link><pubDate>Sat, 08 Mar 2025 00:23:27 +0400</pubDate><guid>https://jiejue.ai/2025/03/git-undo-commands-guide/</guid><description>&lt;h2 id="前言人非圣贤孰能无错">前言：人非圣贤，孰能无错？&lt;/h2>
&lt;p>在代码开发的日常工作中，错误提交几乎是不可避免的 —— 无论你是将一个调试代码意外地提交了上去，还是把更改提交到了错误的分支，亦或是在提交信息中打错了字。这些都是开发过程中再正常不过的&amp;quot;小意外&amp;quot;。&lt;/p></description></item><item><title>Git时光机：如何优雅地移除历史提交中的敏感目录</title><link>https://jiejue.ai/2025/02/git-remove-sensitive-directory-from-history/</link><pubDate>Sun, 23 Feb 2025 11:57:36 +0400</pubDate><guid>https://jiejue.ai/2025/02/git-remove-sensitive-directory-from-history/</guid><description>&lt;p>在使用Git进行版本控制时，我们偶尔会遇到这样的情况：某个目录或文件不小心被提交到了版本库中，而这个目录可能包含了一些不应该被版本控制的内容。这时，我们需要在保留文件的同时，将它从Git的历史记录中移除。&lt;/p></description></item></channel></rss>