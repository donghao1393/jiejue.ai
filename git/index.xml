<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Git on 爱解决</title><link>https://jiejue.ai/git/</link><description>Recent content in Git on 爱解决</description><generator>Hugo</generator><language>zh-cn</language><lastBuildDate>Mon, 21 Jul 2025 21:37:21 +0400</lastBuildDate><atom:link href="https://jiejue.ai/git/index.xml" rel="self" type="application/rss+xml"/><item><title>Git查看其他分支日志：无需切换分支的高效方法</title><link>https://jiejue.ai/2025/07/git-log-other-branch-without-switching/</link><pubDate>Mon, 21 Jul 2025 21:31:34 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-log-other-branch-without-switching/</guid><description>&lt;p>在日常开发中，我们经常需要查看其他分支的提交历史，但又不想频繁切换分支打断当前的工作流程。Git提供了一个非常简单但强大的解决方案，让你能够直接查看任何分支或提交的日志记录。&lt;/p></description></item><item><title>误删Git分支？别慌！一条命令帮你找回来</title><link>https://jiejue.ai/2025/07/git-branch-recovery-guide/</link><pubDate>Mon, 21 Jul 2025 20:27:29 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-branch-recovery-guide/</guid><description>&lt;p>刚刚手滑删掉了一个重要的Git分支？看到那行红色的&amp;quot;Deleted branch&amp;quot;信息时是不是心都凉了半截？别担心，你的代码还在！只要掌握正确的方法，99%的情况下都能完美恢复。&lt;/p></description></item><item><title>Git如何智能处理文件重命名和合并冲突：超越commit的内容感知机制</title><link>https://jiejue.ai/2025/07/git-smart-merge-logic/</link><pubDate>Sat, 19 Jul 2025 00:04:51 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-smart-merge-logic/</guid><description>&lt;p>当你遇到&lt;code>git pull&lt;/code>因为本地修改而失败时，可能会疑惑：为什么有时候简单的stash就能解决，有时候却需要复杂的冲突解决？更神奇的是，当你手动移动文件后，Git竟然能够智能地处理远程的重构操作。这背后的机制远比你想象的更精妙。&lt;/p></description></item><item><title>告别混乱：用 .gitignore 让你的项目目录清爽起来</title><link>https://jiejue.ai/2025/07/gitignore-clean-project/</link><pubDate>Fri, 18 Jul 2025 00:38:58 +0400</pubDate><guid>https://jiejue.ai/2025/07/gitignore-clean-project/</guid><description>&lt;p>你是不是也有过这样的困扰：打开项目文件夹，密密麻麻的文件让你头晕眼花？测试产生的临时文件、编辑器的备份文件、系统自动生成的缓存文件，还有各种日志文件&amp;hellip;每次 &lt;code>git status&lt;/code> 都显示一大堆&amp;quot;未跟踪的文件&amp;quot;，让你不知道哪些该提交，哪些不该提交。&lt;/p></description></item><item><title>Git Submodule 完全指南：一次搞懂子模块的原理与实战</title><link>https://jiejue.ai/2025/07/git-submodule-complete-guide/</link><pubDate>Fri, 04 Jul 2025 21:44:40 +0400</pubDate><guid>https://jiejue.ai/2025/07/git-submodule-complete-guide/</guid><description>&lt;p>当你在开发一个博客网站，想要引入一个漂亮的主题和评论系统时，突然发现这些都是独立的 Git 仓库。你可能会想：是直接下载代码复制过来，还是有更优雅的方式？Git Submodule（子模块）就是专门解决这个问题的工具。&lt;/p></description></item><item><title>Git 跨分支文件拷贝：告别克隆整个项目的笨办法</title><link>https://jiejue.ai/2025/06/git-cross-branch-file-copy/</link><pubDate>Thu, 19 Jun 2025 01:01:21 +0400</pubDate><guid>https://jiejue.ai/2025/06/git-cross-branch-file-copy/</guid><description>&lt;p>想象一下，你正在进行项目开发，突然需要从另一个分支获取某个配置文件。你会怎么做？很多开发者的第一反应是：克隆一个新的项目副本，切换到目标分支，然后手动复制文件。如果你也是这样做的，那么这篇文章将彻底改变你的工作方式。&lt;/p></description></item><item><title>Git的设计哲学：为什么Merge比Cherry-pick更智能？</title><link>https://jiejue.ai/2025/06/git-merge-vs-cherry-pick-design-philosophy/</link><pubDate>Thu, 19 Jun 2025 00:32:09 +0400</pubDate><guid>https://jiejue.ai/2025/06/git-merge-vs-cherry-pick-design-philosophy/</guid><description>&lt;p>作为程序员，我们每天都在使用Git，但你真的理解它的设计哲学吗？最近在一个开发场景中，我遇到了一个有趣的问题：当我的开发分支缺少一个即将被推送到主分支的文件时，应该用cherry-pick还是merge来解决？这个看似简单的选择，背后藏着Git设计的核心智慧。&lt;/p></description></item><item><title>理解 Git Pull 和 Git Fetch 的区别</title><link>https://jiejue.ai/2025/05/understanding-git-pull-vs-fetch/</link><pubDate>Sun, 11 May 2025 00:37:23 +0400</pubDate><guid>https://jiejue.ai/2025/05/understanding-git-pull-vs-fetch/</guid><description>&lt;p>如果你使用 Git 进行团队协作，一定会遇到这样的问题：&lt;code>git pull&lt;/code> 和 &lt;code>git fetch&lt;/code> 到底有什么区别？为什么有时候执行 &lt;code>git pull&lt;/code> 后能看到新分支信息，但分支内容却没有更新？&lt;/p></description></item><item><title>Git 进阶技巧：那些让工作效率翻倍的隐藏功能</title><link>https://jiejue.ai/2025/05/git-advanced-tips-hidden-features/</link><pubDate>Sun, 11 May 2025 00:25:19 +0400</pubDate><guid>https://jiejue.ai/2025/05/git-advanced-tips-hidden-features/</guid><description>&lt;p>你是否遇到过这样的情况：正在开发新功能时，突然有个紧急 bug 需要修复？或者同事请你演示他的代码，而你又不想丢失当前的工作进度？其实 Git 有很多隐藏的功能，能让你的工作变得更加高效。&lt;/p></description></item><item><title>Git 进阶技巧：深入理解那些隐藏的强大功能</title><link>https://jiejue.ai/2025/05/git-advanced-tips-deep-dive/</link><pubDate>Sun, 11 May 2025 00:25:19 +0400</pubDate><guid>https://jiejue.ai/2025/05/git-advanced-tips-deep-dive/</guid><description>&lt;p>Git 作为最流行的版本控制系统，除了基本的 add、commit、push 操作外，还隐藏着许多强大的功能。这些功能不仅能提高工作效率，更能帮助我们更好地理解 Git 的工作原理。让我们深入探索这些进阶技巧。&lt;/p></description></item><item><title>深入理解Git引用与范围表示法：从点到线的思维转变</title><link>https://jiejue.ai/2025/04/understanding-git-references-and-ranges/</link><pubDate>Mon, 21 Apr 2025 09:41:48 +0400</pubDate><guid>https://jiejue.ai/2025/04/understanding-git-references-and-ranges/</guid><description>&lt;p>在日常开发中，我们经常需要查看历史提交、比较不同版本之间的差异，或者创建补丁文件。但你是否曾被Git的各种引用表示法（如HEAD~3, HEAD^）和范围符号（..和&amp;hellip;）搞得一头雾水？本文将为你详细解析这些概念，帮助你从&amp;quot;点&amp;quot;到&amp;quot;线&amp;quot;的思维方式转变，更好地理解和使用Git。&lt;/p></description></item><item><title>快速设置：在Mac上为不同项目使用不同的Git邮箱</title><link>https://jiejue.ai/2025/04/quick-git-email-setup-for-multiple-projects/</link><pubDate>Fri, 18 Apr 2025 18:48:56 +0400</pubDate><guid>https://jiejue.ai/2025/04/quick-git-email-setup-for-multiple-projects/</guid><description>&lt;p>在同一台Mac上同时处理公司和个人项目时，如何避免用错Git邮箱？本文提供简单直接的解决方案，让你轻松管理多个Git身份。&lt;/p></description></item><item><title>在一台Mac上为多个组织配置不同的Git邮箱</title><link>https://jiejue.ai/2025/04/configure-multiple-git-emails-on-mac/</link><pubDate>Fri, 18 Apr 2025 18:48:56 +0400</pubDate><guid>https://jiejue.ai/2025/04/configure-multiple-git-emails-on-mac/</guid><description>&lt;p>在同一台电脑上同时处理公司项目和个人项目时，如何优雅地切换Git身份信息？本文将分享几种在Mac上为不同组织配置不同Git邮箱的方法，帮助你轻松管理多重Git身份。&lt;/p></description></item><item><title>Git跨分支操作技巧：优雅地比较与管理文件</title><link>https://jiejue.ai/2025/04/git-cross-branch-file-management/</link><pubDate>Tue, 15 Apr 2025 22:21:48 +0400</pubDate><guid>https://jiejue.ai/2025/04/git-cross-branch-file-management/</guid><description>&lt;p>在多人协作的项目中，经常需要比较不同分支中的文件差异，或者从其他分支提取特定文件。传统的做法是克隆多个仓库副本，既浪费磁盘空间又难以管理。本文介绍几种优雅高效的跨分支文件操作方法，帮助你彻底告别笨重的工作方式。&lt;/p></description></item><item><title>GitUI: 基于 Rust 的高性能终端 Git 客户端解析</title><link>https://jiejue.ai/2025/03/gitui-terminal-git-client-rust/</link><pubDate>Sat, 29 Mar 2025 18:07:58 +0400</pubDate><guid>https://jiejue.ai/2025/03/gitui-terminal-git-client-rust/</guid><description>&lt;p>在现代软件开发流程中，版本控制已经成为不可或缺的一环，而 Git 作为最流行的版本控制系统，其操作的效率直接影响着开发者的工作体验。GitUI 作为一款基于终端的 Git 客户端，以其惊人的性能和友好的用户界面，正在改变开发者与 Git 交互的方式。&lt;/p></description></item><item><title>用 GitUI 轻松搞定代码管理 - 极简 Git 操作指南</title><link>https://jiejue.ai/2025/03/gitui-quick-start-guide/</link><pubDate>Sat, 29 Mar 2025 18:07:58 +0400</pubDate><guid>https://jiejue.ai/2025/03/gitui-quick-start-guide/</guid><description>&lt;p>还在为记不住 Git 命令而发愁？还在为复杂的版本控制操作而头疼？试试 GitUI 吧！它能让你像使用图形界面那样轻松，但速度更快、更高效！&lt;/p></description></item><item><title>解放双手：使用 pre-commit 自动化代码质量检查与修复</title><link>https://jiejue.ai/2025/03/pre-commit-hooks-automation/</link><pubDate>Sun, 23 Mar 2025 17:33:47 +0400</pubDate><guid>https://jiejue.ai/2025/03/pre-commit-hooks-automation/</guid><description>&lt;p>你是否曾经为了处理代码中的行尾空格、文件末尾换行符等问题而头疼不已？或者团队中有人不小心提交了敏感信息或格式混乱的代码？pre-commit 工具将彻底解决这些烦恼，让你在提交代码前自动检查并修复常见问题。&lt;/p></description></item><item><title>Git进阶：优雅地忽略已追踪文件的变更</title><link>https://jiejue.ai/2025/03/git-ignore-tracked-file-changes/</link><pubDate>Fri, 21 Mar 2025 18:27:40 +0400</pubDate><guid>https://jiejue.ai/2025/03/git-ignore-tracked-file-changes/</guid><description>&lt;p>当你使用Git时，是否曾被一些不想提交但总是显示为已修改的文件所困扰？例如MacOS的.DS_Store文件、IDE的配置文件或是子模块中的临时文件？本文将介绍Git中不为人熟知但极其实用的忽略文件变更的方法。&lt;/p></description></item><item><title>Git历史侦探：如何追踪代码变更和定位问题</title><link>https://jiejue.ai/2025/03/git-history-detective/</link><pubDate>Sat, 15 Mar 2025 11:26:31 +0400</pubDate><guid>https://jiejue.ai/2025/03/git-history-detective/</guid><description>&lt;p>当某个函数突然消失，或者某行关键代码被莫名其妙修改时，Git历史记录就是你最强大的调查工具。本文将介绍如何像侦探一样追踪Git历史中的代码变更，解决&amp;quot;谁改了这段代码&amp;quot;、&amp;ldquo;这个函数什么时候被删除的&amp;quot;等问题。&lt;/p></description></item><item><title>使用 Semantic Release 实现自动化版本发布：踩坑与解决方案</title><link>https://jiejue.ai/2025/03/automatic-versioning-with-semantic-release/</link><pubDate>Thu, 13 Mar 2025 21:15:50 +0400</pubDate><guid>https://jiejue.ai/2025/03/automatic-versioning-with-semantic-release/</guid><description>&lt;p>在软件开发过程中，版本管理看似简单却常常令人头疼。手动管理版本不仅繁琐，还容易出错。通过语义化版本发布工具（Semantic Release），我们可以将这一过程自动化，但这个过程中也隐藏着一些易被忽视的陷阱。本文将分享我们团队在使用 Semantic Release 时遇到的问题和解决方案，帮助你避开这些坑。&lt;/p></description></item><item><title>Git补救指南：如何优雅地撤销错误提交</title><link>https://jiejue.ai/2025/03/git-undo-commands-guide/</link><pubDate>Sat, 08 Mar 2025 00:23:27 +0400</pubDate><guid>https://jiejue.ai/2025/03/git-undo-commands-guide/</guid><description>&lt;h2 id="前言人非圣贤孰能无错">前言：人非圣贤，孰能无错？&lt;/h2>
&lt;p>在代码开发的日常工作中，错误提交几乎是不可避免的 —— 无论你是将一个调试代码意外地提交了上去，还是把更改提交到了错误的分支，亦或是在提交信息中打错了字。这些都是开发过程中再正常不过的&amp;quot;小意外&amp;quot;。&lt;/p></description></item><item><title>Git LFS：优雅管理大文件的最佳实践</title><link>https://jiejue.ai/2025/03/git-lfs-best-practices/</link><pubDate>Thu, 06 Mar 2025 09:13:29 +0400</pubDate><guid>https://jiejue.ai/2025/03/git-lfs-best-practices/</guid><description>&lt;p>在开发过程中，我们总会遇到需要将大型二进制文件（如 PDF、APK、DMG、字体文件等）纳入版本控制的情况。如果直接将这些文件添加到普通的 Git 仓库中，可能导致仓库体积膨胀、克隆时间延长，甚至使团队协作变得困难。Git LFS（Large File Storage）正是为解决这一问题而生的扩展工具。&lt;/p></description></item><item><title>解决 Git 引用冲突：当 pull 操作莫名失败的排障指南</title><link>https://jiejue.ai/2025/02/git-reference-conflict-troubleshooting/</link><pubDate>Tue, 25 Feb 2025 16:45:24 +0400</pubDate><guid>https://jiejue.ai/2025/02/git-reference-conflict-troubleshooting/</guid><description>&lt;p>当我们在协作开发中使用 Git 时，有时会遇到一些令人困惑的错误。比如明明是个简单的 &lt;code>git pull&lt;/code> 操作，却突然报错，而且错误信息还与当前分支看似无关。本文将深入解析 Git 的引用系统，帮你理解并解决一个常见但令人困惑的问题：引用冲突导致的 pull 失败。&lt;/p></description></item><item><title>Git时光机：如何优雅地移除历史提交中的敏感目录</title><link>https://jiejue.ai/2025/02/git-remove-sensitive-directory-from-history/</link><pubDate>Sun, 23 Feb 2025 11:57:36 +0400</pubDate><guid>https://jiejue.ai/2025/02/git-remove-sensitive-directory-from-history/</guid><description>&lt;p>在使用Git进行版本控制时，我们偶尔会遇到这样的情况：某个目录或文件不小心被提交到了版本库中，而这个目录可能包含了一些不应该被版本控制的内容。这时，我们需要在保留文件的同时，将它从Git的历史记录中移除。&lt;/p></description></item><item><title>Git Reset 进阶：像时光机一样掌控代码历史</title><link>https://jiejue.ai/2025/02/git-reset-advance/</link><pubDate>Thu, 20 Feb 2025 22:09:26 +0400</pubDate><guid>https://jiejue.ai/2025/02/git-reset-advance/</guid><description>&lt;p>你是不是经常用 &lt;code>git reset --hard HEAD~1&lt;/code> 来撤销最近的一次提交？其实 Git 的重置功能远比这个强大得多。今天让我们一起来探索 Git Reset 的高级用法，看看如何像使用时光机一样自如地掌控你的代码历史。&lt;/p></description></item><item><title>如何从 Git 历史中优雅地移除敏感文件</title><link>https://jiejue.ai/2025/02/how-to-remove-sensitive-files-from-git-history/</link><pubDate>Tue, 18 Feb 2025 17:45:37 +0400</pubDate><guid>https://jiejue.ai/2025/02/how-to-remove-sensitive-files-from-git-history/</guid><description>&lt;p>开发中不小心把敏感文件（比如配置文件、密钥）提交到了 Git 仓库？别慌，这篇文章告诉你如何干净利落地处理这个问题。&lt;/p></description></item><item><title>Git历史修改的秘密：如何优雅地改写过去的提交</title><link>https://jiejue.ai/2025/02/git-modify-history-commit/</link><pubDate>Sat, 15 Feb 2025 18:41:11 +0400</pubDate><guid>https://jiejue.ai/2025/02/git-modify-history-commit/</guid><description>&lt;p>在使用Git的过程中，你是否遇到过这样的情况：刚刚提交完代码，突然发现漏了一个小改动，但又不想新建一个commit？或者发现前几天的某个提交中有个小瑕疵，想悄悄修复但不想影响整个提交历史？今天就来聊聊如何优雅地处理这些情况。&lt;/p></description></item><item><title>Git救急：如何从最近的提交中分离出一个文件</title><link>https://jiejue.ai/2025/02/git-rescue-wrong-commit/</link><pubDate>Sat, 15 Feb 2025 18:02:12 +0400</pubDate><guid>https://jiejue.ai/2025/02/git-rescue-wrong-commit/</guid><description>&lt;p>小明最近在开发一个新功能，刚刚提交了一些代码。但提交完他突然发现，自己不小心把一个还没完成的配置文件也一起提交了进去。他想把这个文件从刚才的提交中分离出来，单独提交，该怎么办呢？&lt;/p></description></item><item><title>Git Rebase 后如何修复提交时间</title><link>https://jiejue.ai/2025/02/git-rebase-date-fix/</link><pubDate>Thu, 13 Feb 2025 22:35:10 +0400</pubDate><guid>https://jiejue.ai/2025/02/git-rebase-date-fix/</guid><description>&lt;p>在使用 Git 进行版本控制时，我们偶尔会需要修改历史提交。但是在使用 rebase 命令后，可能会发现一个令人困扰的问题：所有被 rebase 影响的提交时间都被重置为执行 rebase 的时间。这篇文章将介绍如何在不影响提交时间的情况下，安全地修改 Git 历史。&lt;/p></description></item><item><title>博客迁移中的时间处理：从Git历史到元数据</title><link>https://jiejue.ai/2025/02/blog-migration-time-processing/</link><pubDate>Sun, 02 Feb 2025 11:26:52 +0400</pubDate><guid>https://jiejue.ai/2025/02/blog-migration-time-processing/</guid><description>&lt;p>在博客系统迁移过程中，文章的创建时间往往会成为一个容易被忽视却又不得不解决的问题。本文将分享一个从Zola迁移到Hugo过程中，如何通过Git历史信息和Shell脚本来恢复并维护文章时间的实践经验。&lt;/p></description></item><item><title>解决 Git 中文件末尾换行符引起的差异问题</title><link>https://jiejue.ai/2025/01/fix-git-newline/</link><pubDate>Wed, 29 Jan 2025 09:11:16 +0400</pubDate><guid>https://jiejue.ai/2025/01/fix-git-newline/</guid><description>&lt;h2 id="问题描述">问题描述&lt;/h2></description></item></channel></rss>